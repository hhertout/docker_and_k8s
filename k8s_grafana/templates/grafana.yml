apiVersion: apps/v1
kind: {{.Values.grafana.kind}}
metadata:
  name: {{.Values.grafana.name}}-deployment
  labels:
    app: {{.Values.grafana.name}}
spec:
  replicas: {{.Values.grafana.replicas}}
  selector:
    matchLabels:
      app: {{.Values.grafana.name}}
  template:
    metadata:
      labels:
        app: {{.Values.grafana.name}}
    spec:
      securityContext:
        fsGroup: 472
        supplementalGroups:
          - 0
      containers:
        - name: {{.Values.grafana.specs.container_name}}
          image: {{.Values.grafana.specs.image}}
          ports:
            - containerPort: {{.Values.grafana.specs.container_port}}
          env: {{- range .Values.grafana.env }}
            - name: {{.name}}
              value: {{.value}}
          {{- end }}
          resources:
            limits:
              cpu: "500m"
              memory: "200Mi"
            requests:
              cpu: "50m"
              memory: "80Mi"
          imagePullPolicy: IfNotPresent
          readinessProbe:
            httpGet:
                path: /api/health
                port: 3000
          livenessProbe:
            httpGet:
                path: /api/health
                port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
            failureThreshold: 10
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: {{.Values.grafana.name}}-pv
            - name: {{.Values.grafana_provisioning.volume.config.name}}
              mountPath: {{.Values.grafana_provisioning.volume.config.path}}
              subPath: {{.Values.grafana_provisioning.volume.config.subPath}}
      volumes:
        - name: {{.Values.grafana.name}}-pv
          persistentVolumeClaim:
            claimName: {{.Values.grafana.volume.name}}
        - name: {{.Values.grafana_provisioning.volume.config.name}}
          configMap:
            name: {{.Values.grafana_provisioning.volume.config.configMap}}
