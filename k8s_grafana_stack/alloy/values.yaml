tls:
  cert_manager:
    issuer: letsencrypt-issuer

alloy:
  name: alloy
  kind: Deployment
  specs:
    replicas: 1
    container_name: alloy
    image: grafana/alloy:v1.7.5
    ports:
      - port: 4317
        protocol: TCP
        exposed_port: 4317
        name: grpc
      - port: 4318
        protocol: TCP
        exposed_port: 4318
        name: http
      - port: 9999
        protocol: TCP
        exposed_port: 9999
        name: pyroscope
  volume:
    config:
      name: alloy-config
      configMap: alloy-config
      path: /etc/config.alloy
      subPath: config.alloy
  ingress:
    hosts:
      - host: otel-http.neryolab.com
        path: /
        service_name: alloy-service
        tls_secret_name: alloy-http-tls
        port: 4318
      - host: otel-grpc.neryolab.com
        path: /
        service_name: alloy-service
        tls_secret_name: alloy-grpc-tls
        port: 4317
      - host: otel-pyroscope.neryolab.com
        path: /
        service_name: alloy-service
        tls_secret_name: alloy-pyroscope-tls
        port: 9999
  hpa:
    min: 1
    max: 1
    cpu: 120
    memory: 120

config: |
    logging {
        level = "info"
        format = "logfmt"
        write_to = [loki.write.default.receiver]
    }

    tracing {
        sampling_fraction = 0.1
        write_to          = [otelcol.exporter.otlp.tempo.input]
    }

    otelcol.receiver.otlp "default" {
        grpc {
            endpoint = "0.0.0.0:4317"
        }
        http {
            endpoint = "0.0.0.0:4318"
        }

        output {
            metrics = [otelcol.processor.batch.default.input]
            logs    = [otelcol.processor.batch.default.input]
            traces  = [otelcol.processor.batch.default.input]
        }
    }

    otelcol.processor.batch "default" {
        output {
            metrics = [otelcol.exporter.prometheus.mimir.input]
            logs    = [otelcol.exporter.loki.default.input]
            traces  = [otelcol.exporter.otlp.tempo.input]
        }
    }

    otelcol.exporter.otlp "tempo" {
        client {
            endpoint = "tempo-service:3200"
            tls {
                insecure = true
            }
        }
    }

    otelcol.exporter.loki "default" {
        forward_to = [loki.write.default.receiver]
    }

    loki.write "default" {
        endpoint {
            url = "http://loki-service:3100/loki/api/v1/push"

            tls_config {
                insecure_skip_verify = true
            }
        }
    }

    otelcol.exporter.prometheus "mimir" {
        forward_to = [prometheus.remote_write.mimir.receiver]
    }

    prometheus.remote_write "mimir" {
        endpoint {
            url = "http://mimir-service:9009/api/v1/push"
        }
    }

    pyroscope.receive_http "default" {
        http {
            listen_address = "0.0.0.0"
            listen_port = 9999
        }

        forward_to = [pyroscope.relabel.filter_profiles.receiver]
        }

        pyroscope.relabel "filter_profiles" {
            forward_to = [pyroscope.write.backend.receiver]

            rule {
                action = "labeldrop"
                regex = "service_name"
            }
        }

        // Forwards profiles to Pyroscope
        pyroscope.write "backend" {
        endpoint {
            url = "http://pyroscope-service:4040"
        }
    }

    prometheus.exporter.self "default" {
    }

    prometheus.relabel "self_monitor_relabel" {
        forward_to = [prometheus.remote_write.mimir.receiver]


        rule {
            action        = "replace"
            target_label  = "job"
            replacement   = "alloy"
        }

        rule {
            action        = "replace"
            target_label  = "service_name"
            replacement   = "alloy"
        }
    }

    prometheus.scrape "metamonitoring" {
        targets    = prometheus.exporter.self.default.targets
        forward_to = [prometheus.relabel.self_monitor_relabel.receiver]
    }

    