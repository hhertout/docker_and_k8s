tls:
  cert_manager:
    issuer: letsencrypt-issuer

alloy:
  name: alloy
  kind: Deployment
  specs:
    replicas: 1
    container_name: alloy
    image: grafana/alloy:v1.7.5
    ports:
      - port: 4317
        protocol: TCP
        exposed_port: 4317
        name: grpc
      - port: 12345
        protocol: TCP
        exposed_port: 12345
        name: self
      - port: 4318
        protocol: TCP
        exposed_port: 4318
        name: http
      - port: 9999
        protocol: TCP
        exposed_port: 9999
        name: pyroscope
  volume:
    config:
      name: alloy-config
      configMap: alloy-config
      path: /etc/config.alloy
      subPath: config.alloy
  ingress:
    http:
      hosts:
        - host: otel-http.neryolab.com
          path: /
          service_name: alloy-service
          pathType: Prefix
          tls_secret_name: alloy-http-tls
          port: 4318
        - host: alloy.neryolab.com
          path: /-/ready
          pathType: Exact
          service_name: alloy-service
          tls_secret_name: alloy-self-tls
          port: 12345
        - host: pyroscope.neryolab.com
          path: /
          service_name: alloy-service
          pathType: Prefix
          tls_secret_name: alloy-pyroscope-tls
          port: 9999
    grpc:
      hosts:
        - host: otel-grpc.neryolab.com
          path: /
          service_name: alloy-service
          tls_secret_name: alloy-grpc-tls
          port: 4317
  resources:
    limits:
      cpu: "500m"
      memory: "200Mi"
    requests:
      cpu: "250m"
      memory: "80Mi"
  hpa:
    min: 2
    max: 4
    cpu: 120
    memory: 120

config: |
    logging {
        level = "info"
        format = "logfmt"
    }

    otelcol.receiver.otlp "default" {
        grpc {
            endpoint = "0.0.0.0:4317"
        }
        http {
            endpoint = "0.0.0.0:4318"
        }

        output {
            metrics = [otelcol.processor.resourcedetection.default.input]
            logs    = [otelcol.processor.resourcedetection.default.input]
            traces  = [otelcol.processor.resourcedetection.default.input]
        }
    }

    otelcol.processor.resourcedetection "default" {
        detectors = ["env", "system"] // add "gcp", "ec2", "ecs", "elastic_beanstalk", "eks", "lambda", "azure", "aks", "consul", "heroku"  if you want to use cloud resource detection

        system {
            hostname_sources = ["os"]
        }

        output {
            metrics = [otelcol.processor.transform.drop_unneeded_resource_attributes.input]
            logs    = [otelcol.processor.transform.drop_unneeded_resource_attributes.input]
            traces  = [otelcol.processor.transform.drop_unneeded_resource_attributes.input]
        }
    }

    otelcol.processor.transform "drop_unneeded_resource_attributes" {
        error_mode = "ignore"

        trace_statements {
            context    = "resource"
            statements = [
            "delete_key(attributes, \"k8s.pod.start_time\")",
            "delete_key(attributes, \"os.description\")",
            "delete_key(attributes, \"os.type\")",
            "delete_key(attributes, \"process.command_args\")",
            "delete_key(attributes, \"process.executable.path\")",
            "delete_key(attributes, \"process.pid\")",
            "delete_key(attributes, \"process.runtime.description\")",
            "delete_key(attributes, \"process.runtime.name\")",
            "delete_key(attributes, \"process.runtime.version\")",
            ]
        }

        metric_statements {
            context    = "resource"
            statements = [
            "delete_key(attributes, \"__name__\")",
            "delete_key(attributes, \"id\")",
            "delete_key(attributes, \"container_tasks_state\")",
            "delete_key(attributes, \"k8s.pod.start_time\")",
            "delete_key(attributes, \"os.description\")",
            "delete_key(attributes, \"os.type\")",
            "delete_key(attributes, \"process.command_args\")",
            "delete_key(attributes, \"process.executable.path\")",
            "delete_key(attributes, \"process.pid\")",
            "delete_key(attributes, \"process.runtime.description\")",
            "delete_key(attributes, \"process.runtime.name\")",
            "delete_key(attributes, \"process.runtime.version\")",
            ]
        }

        log_statements {
            context    = "resource"
            statements = [
            "delete_key(attributes, \"k8s.pod.start_time\")",
            "delete_key(attributes, \"os.description\")",
            "delete_key(attributes, \"os.type\")",
            "delete_key(attributes, \"process.command_args\")",
            "delete_key(attributes, \"process.executable.path\")",
            "delete_key(attributes, \"process.pid\")",
            "delete_key(attributes, \"process.runtime.description\")",
            "delete_key(attributes, \"process.runtime.name\")",
            "delete_key(attributes, \"process.runtime.version\")",
            ]
        }

        output {
            metrics = [otelcol.processor.transform.add_resource_attributes_as_metric_attributes.input]
            logs    = [otelcol.processor.batch.default.input]
            traces  = [
            otelcol.processor.batch.default.input,
            otelcol.connector.host_info.default.input,
            ]
        }
    }

    otelcol.connector.host_info "default" {
        host_identifiers = ["host.name"]

        output {
            metrics = [otelcol.processor.batch.default.input]
        }
    }

    otelcol.processor.transform "add_resource_attributes_as_metric_attributes" {
        error_mode = "ignore"

        metric_statements {
            context    = "datapoint"
            statements = [
            "set(attributes[\"deployment.environment\"], resource.attributes[\"deployment.environment\"])",
            "set(attributes[\"service.version\"], resource.attributes[\"service.version\"])",
            ]
        }

        output {
            metrics = [otelcol.processor.batch.default.input]
        }
    }

    otelcol.processor.batch "default" {
        output {
            metrics = [otelcol.exporter.otlphttp.grafana_cloud.input]
            logs    = [otelcol.exporter.otlphttp.grafana_cloud.input]
            traces  = [otelcol.exporter.otlphttp.grafana_cloud.input]
        }
    }

    otelcol.exporter.otlphttp "grafana_cloud" {
        client {
            endpoint = sys.env("GRAFANA_CLOUD_ENDPOINT")
            auth     = otelcol.auth.basic.grafana_cloud.handler
        }
    }

    otelcol.auth.basic "grafana_cloud" {
        username = sys.env("GRAFANA_CLOUD_USERNAME")
        password = sys.env("GRAFANA_CLOUD_PASSWORD")
    }

    pyroscope.receive_http "default" {
        http {
            listen_address = "0.0.0.0"
            listen_port = 9999
        }

        forward_to = [pyroscope.relabel.filter_profiles.receiver]
    }

    pyroscope.relabel "filter_profiles" {
        forward_to = [pyroscope.write.backend.receiver]
    }

    pyroscope.write "backend" {
        endpoint {
            url = sys.env("PYROSCOPE_ENDPOINT")

            basic_auth {
                username = sys.env("GRAFANA_CLOUD_USERNAME")
                password = sys.env("GRAFANA_CLOUD_PASSWORD")
            }
        }
    }